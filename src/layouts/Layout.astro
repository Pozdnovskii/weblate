---
import "../styles/global.css";
import { Font } from "astro:assets";

import Header from "../components/Header.astro";

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const title = "Ivan Pozdnovskii | Web Developer";
const description =
  "Modern Website development with Astro, Webstudio, Webflow, and Shopify. Expert in site speed optimization, SEO, and accessibility for higher rankings.";
---

<!doctype html>
<html lang="en" class="antialiased">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/opengraph.webp" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/opengraph.webp" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="robots" content="index, follow" />
    <!-- <meta name="view-transition" content="same-origin" /> -->
    <Font cssVariable="--font-space-grotesk" preload />
    <Font cssVariable="--font-space-mono" preload />
  </head>
  <body class="bg-zinc-800 text-white">
    <Header />
    <slot />
    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        const header = document.getElementById("header");
        const burger = document.getElementById("header-btn");
        const nav = document.getElementById("header-nav");
        const headerContent = document.getElementById("header-content");

        if (!header) return;

        let isOpen = false;
        function toggleMenu() {
          console.log(isOpen);
          isOpen = !isOpen;
          header.classList.toggle("header--open", isOpen);
          burger.setAttribute("aria-expanded", isOpen);

          if (isOpen) {
            setTimeout(() => nav?.querySelector("a")?.focus(), 150);
          }
        }

        burger.addEventListener("click", toggleMenu);

        document.addEventListener("keydown", (e) => {
          if (e.key === "Escape" && isOpen) {
            toggleMenu();
            burger.focus();
          }
        });

        document.addEventListener("click", (e) => {
          if (isOpen && !headerContent.contains(e.target)) {
            toggleMenu();
          }
        });

        nav.querySelectorAll("a").forEach((link) => {
          link.addEventListener("click", () => {
            if (isOpen) {
              toggleMenu();
            }
          });
        });

        // Dialogue
        const dialog = document.querySelector("dialog");

        if (!dialog) return;

        setTimeout(() => {
          dialog.showModal();
        }, 1200);

        dialog.addEventListener("click", (event) => {
          const isBackdropClick = event.target === dialog;
          if (isBackdropClick) {
            dialog.close();
          }
        });

        // Url cleaner
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener("click", (e) => {
            e.preventDefault();
            const id = anchor.getAttribute("href").substring(1);
            const target = document.getElementById(id);
            if (target) {
              target.scrollIntoView({ behavior: "smooth" });
            }
          });
        });
      });
    </script>

    <script is:inline>
      if (!document.getElementById("btn-wrapper")) {
        return;
      }

      const table = document.querySelector("table");

      const showColumn = (index) => {
        table.querySelectorAll("tr").forEach((row) => {
          [...row.children].forEach((cell, i) => {
            cell.style.display =
              i < 2 || i === index - 1 ? "table-cell" : "none";
          });
        });
      };

      document.addEventListener("click", (e) => {
        const btn = e.target.closest("[data-col]");
        if (!btn) return;
        showColumn(Number(btn.dataset.col));
      });

      const showColumnOnMobile = () => {
        if (window.innerWidth <= 480) {
          showColumn(3);
        }
      };

      showColumnOnMobile();

      window.addEventListener("resize", showColumnOnMobile);
    </script>
  </body>
</html>
